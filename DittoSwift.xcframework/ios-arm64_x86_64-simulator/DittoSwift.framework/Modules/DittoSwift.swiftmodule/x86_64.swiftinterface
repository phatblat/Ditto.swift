// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DittoSwift
import DittoObjC.DittoFFI
import DittoObjC
@_exported import DittoSwift
import Foundation
import DittoObjC.Private
import Swift
import _Concurrency
@_hasMissingDesignatedInitializers public class DittoAttachmentFetcher {
  public func stop()
  @objc deinit
}
public enum DittoUpdateResult {
  case set(docID: DittoSwift.DittoDocumentID, path: Swift.String, value: Any?)
  case removed(docID: DittoSwift.DittoDocumentID, path: Swift.String)
  case replacedWithCounter(docID: DittoSwift.DittoDocumentID, path: Swift.String)
  case incremented(docID: DittoSwift.DittoDocumentID, path: Swift.String, amount: Swift.Double)
  case pushed(docID: DittoSwift.DittoDocumentID, path: Swift.String, value: Any?)
  case popped(docID: DittoSwift.DittoDocumentID, path: Swift.String, value: Any?)
  case inserted(docID: DittoSwift.DittoDocumentID, path: Swift.String, value: Any?)
}
public struct DittoCollectionsEvent {
  public let isInitial: Swift.Bool
  public let collections: [DittoSwift.DittoCollection]
  public let oldCollections: [DittoSwift.DittoCollection]
  public let insertions: [Swift.Int]
  public let deletions: [Swift.Int]
  public let updates: [Swift.Int]
  public let moves: [(from: Swift.Int, to: Swift.Int)]
}
extension DittoSwift.DittoCollectionsEvent : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
public enum DittoAttachmentFetchEvent {
  case completed(DittoSwift.DittoAttachment)
  case progress(downloadedBytes: Swift.UInt64, totalBytes: Swift.UInt64)
  case deleted
}
@_hasMissingDesignatedInitializers public class DittoTransportSnapshot {
  final public let connectionType: Swift.String
  final public let connecting: [Swift.Int64]
  final public let connected: [Swift.Int64]
  final public let disconnecting: [Swift.Int64]
  final public let disconnected: [Swift.Int64]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DittoDocument {
  final public let id: DittoSwift.DittoDocumentID
  public var value: [Swift.String : Any?] {
    get
  }
  public func typed<T>(as type: T.Type) throws -> DittoSwift.DittoTypedDocument<T> where T : Swift.Decodable, T : Swift.Encodable
  public subscript(key: Swift.String) -> DittoSwift.DittoDocumentPath {
    get
  }
  @objc deinit
}
extension DittoSwift.DittoDocument : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension DittoSwift.DittoDocument : Swift.Identifiable {
  public typealias ID = DittoSwift.DittoDocumentID
}
public typealias DittoCollectionName = Swift.String
extension Swift.String {
  public static var history: Swift.String
}
@_hasMissingDesignatedInitializers public class DittoCollection {
  public var name: Swift.String {
    get
  }
  @discardableResult
  public func insert(_ content: [Swift.String : Any?], id: Any? = nil, isDefault: Swift.Bool = false) throws -> DittoSwift.DittoDocumentID
  @discardableResult
  public func insertWithStrategy(_ content: [Swift.String : Any?], id: DittoSwift.DittoDocumentID? = nil, writeStrategy: DittoSwift.DittoWriteStrategy = .overwrite) throws -> DittoSwift.DittoDocumentID
  @discardableResult
  public func insert<T>(_ content: T, id: DittoSwift.DittoDocumentID? = nil, isDefault: Swift.Bool = false) throws -> DittoSwift.DittoDocumentID where T : Swift.Decodable, T : Swift.Encodable
  @discardableResult
  public func insertWithStrategy<T>(_ content: T, id: DittoSwift.DittoDocumentID? = nil, writeStrategy: DittoSwift.DittoWriteStrategy = .overwrite) throws -> DittoSwift.DittoDocumentID where T : Swift.Decodable, T : Swift.Encodable
  public func findByID(_ id: DittoSwift.DittoDocumentID) -> DittoSwift.DittoPendingIDSpecificOperation
  public func findByID(_ id: Any) -> DittoSwift.DittoPendingIDSpecificOperation
  public func find(_ query: Swift.String) -> DittoSwift.DittoPendingCursorOperation
  public func find(_ query: Swift.String, args queryArgs: Swift.Dictionary<Swift.String, Any?>) -> DittoSwift.DittoPendingCursorOperation
  public func findAll() -> DittoSwift.DittoPendingCursorOperation
  public func newAttachment(path: Swift.String, metadata: [Swift.String : Swift.String] = [:]) -> DittoSwift.DittoAttachment?
  public func fetchAttachment(token: DittoSwift.DittoAttachmentToken, deliverOn queue: Dispatch.DispatchQueue = .main, onFetchEvent: @escaping (DittoSwift.DittoAttachmentFetchEvent) -> Swift.Void) -> DittoSwift.DittoAttachmentFetcher?
  @objc deinit
}
public enum DittoWriteTransactionResult {
  case inserted(id: DittoSwift.DittoDocumentID, collection: Swift.String)
  case updated(id: DittoSwift.DittoDocumentID, collection: Swift.String)
  case evicted(id: DittoSwift.DittoDocumentID, collection: Swift.String)
  case removed(id: DittoSwift.DittoDocumentID, collection: Swift.String)
}
indirect public enum CBOR : Swift.Equatable, Swift.Hashable, Swift.ExpressibleByNilLiteral, Swift.ExpressibleByIntegerLiteral, Swift.ExpressibleByStringLiteral, Swift.ExpressibleByArrayLiteral, Swift.ExpressibleByDictionaryLiteral, Swift.ExpressibleByBooleanLiteral, Swift.ExpressibleByFloatLiteral {
  case unsignedInt(Swift.UInt64)
  case negativeInt(Swift.UInt64)
  case byteString([Swift.UInt8])
  case utf8String(Swift.String)
  case array([DittoSwift.CBOR])
  case map([DittoSwift.CBOR : DittoSwift.CBOR])
  case tagged(DittoSwift.CBOR.Tag, DittoSwift.CBOR)
  case simple(Swift.UInt8)
  case boolean(Swift.Bool)
  case null
  case undefined
  case half(Swift.Float32)
  case float(Swift.Float32)
  case double(Swift.Float64)
  case `break`
  case date(Foundation.Date)
  public func hash(into hasher: inout Swift.Hasher)
  public subscript(position: DittoSwift.CBOR) -> DittoSwift.CBOR? {
    get
    set(x)
  }
  public init(nilLiteral: ())
  public init(integerLiteral value: Swift.Int)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public init(unicodeScalarLiteral value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(arrayLiteral elements: DittoSwift.CBOR...)
  public init(dictionaryLiteral elements: (DittoSwift.CBOR, DittoSwift.CBOR)...)
  public init(booleanLiteral value: Swift.Bool)
  public init(floatLiteral value: Swift.Float32)
  public static func == (lhs: DittoSwift.CBOR, rhs: DittoSwift.CBOR) -> Swift.Bool
  public struct Tag : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable {
    public let rawValue: Swift.UInt64
    public init(rawValue: Swift.UInt64)
    public var hashValue: Swift.Int {
      get
    }
    public typealias RawValue = Swift.UInt64
  }
  public typealias ArrayLiteralElement = DittoSwift.CBOR
  public typealias BooleanLiteralType = Swift.Bool
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias FloatLiteralType = Swift.Float32
  public typealias IntegerLiteralType = Swift.Int
  public typealias Key = DittoSwift.CBOR
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
  public typealias Value = DittoSwift.CBOR
  public var hashValue: Swift.Int {
    get
  }
}
extension DittoSwift.CBOR.Tag {
  public static let standardDateTimeString: DittoSwift.CBOR.Tag
  public static let epochBasedDateTime: DittoSwift.CBOR.Tag
  public static let positiveBignum: DittoSwift.CBOR.Tag
  public static let negativeBignum: DittoSwift.CBOR.Tag
  public static let decimalFraction: DittoSwift.CBOR.Tag
  public static let bigfloat: DittoSwift.CBOR.Tag
  public static let expectedConversionToBase64URLEncoding: DittoSwift.CBOR.Tag
  public static let expectedConversionToBase64Encoding: DittoSwift.CBOR.Tag
  public static let expectedConversionToBase16Encoding: DittoSwift.CBOR.Tag
  public static let encodedCBORDataItem: DittoSwift.CBOR.Tag
  public static let uri: DittoSwift.CBOR.Tag
  public static let base64Url: DittoSwift.CBOR.Tag
  public static let base64: DittoSwift.CBOR.Tag
  public static let regularExpression: DittoSwift.CBOR.Tag
  public static let mimeMessage: DittoSwift.CBOR.Tag
  public static let uuid: DittoSwift.CBOR.Tag
  public static let selfDescribeCBOR: DittoSwift.CBOR.Tag
}
public struct DittoTransportConfig {
  public var peerToPeer: DittoObjC.DITMutablePeerToPeer
  public var connect: DittoObjC.DITMutableConnect
  public var listen: DittoObjC.DITMutableListen
  public var global: DittoObjC.DITMutableGlobalConfig
  public init()
  public mutating func enableAllPeerToPeer()
}
public enum LMDBError : Swift.Equatable {
  case keyExists
  case notFound
  case pageNotFound
  case corrupted
  case panic
  case versionMismatch
  case invalid
  case mapFull
  case dbsFull
  case readersFull
  case tlsFull
  case txnFull
  case cursorFull
  case pageFull
  case mapResized
  case incompatible
  case badReaderSlot
  case badTransaction
  case badValueSize
  case badDBI
  case problem
  case invalidParameter
  case outOfDiskSpace
  case outOfMemory
  case ioError
  case accessViolation
  case other(returnCode: Swift.Int32)
  public static func == (a: DittoSwift.LMDBError, b: DittoSwift.LMDBError) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class DittoLiveQuery {
  public var query: Swift.String {
    get
  }
  public var collectionName: DittoSwift.DittoCollectionName {
    get
  }
  public func stop()
  @objc deinit
}
public typealias DittoSignalNext = () -> Swift.Void
@_hasMissingDesignatedInitializers public class DittoWriteTransactionPendingIDSpecificOperation {
  @discardableResult
  public func remove() -> Swift.Bool
  @discardableResult
  public func evict() -> Swift.Bool
  public func exec() -> DittoSwift.DittoDocument?
  @discardableResult
  public func update(_ closure: @escaping (DittoSwift.DittoMutableDocument?) -> Swift.Void) -> [DittoSwift.DittoUpdateResult]
  public func update<T>(using newValue: T) throws where T : Swift.Decodable, T : Swift.Encodable
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DittoPeerV2Parser {
  public class func parseJson(json: Swift.String) -> [DittoSwift.DittoRemotePeerV2]?
  @objc deinit
}
public enum DittoLogLevel : Swift.Int {
  case error
  case warning
  case info
  case debug
  case verbose
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum DittoTransportCondition : Swift.UInt32, Swift.CustomStringConvertible {
  case Unknown
  case Ok
  case GenericFailure
  case AppInBackground
  case MdnsFailure
  case TcpListenFailure
  case NoBleCentralPermission
  case NoBlePeripheralPermission
  case CannotEstablishConnection
  case BleDisabled
  case NoBleHardware
  case WifiDisabled
  case TemporarilyUnavailable
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt32)
  public typealias RawValue = Swift.UInt32
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum DittoConditionSource : Swift.UInt32, Swift.CustomStringConvertible {
  case Bluetooth
  case Tcp
  case Awdl
  case Mdns
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt32)
  public typealias RawValue = Swift.UInt32
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct DittoDocumentPath {
  public subscript(key: Swift.String) -> DittoSwift.DittoDocumentPath {
    get
  }
  public subscript(index: Swift.Int) -> DittoSwift.DittoDocumentPath {
    get
  }
  public var value: Any? {
    get
  }
  public var string: Swift.String? {
    get
  }
  public var stringValue: Swift.String {
    get
  }
  public var bool: Swift.Bool? {
    get
  }
  public var boolValue: Swift.Bool {
    get
  }
  public var int: Swift.Int? {
    get
  }
  public var intValue: Swift.Int {
    get
  }
  public var uint: Swift.UInt? {
    get
  }
  public var uintValue: Swift.UInt {
    get
  }
  public var float: Swift.Float? {
    get
  }
  public var floatValue: Swift.Float {
    get
  }
  public var double: Swift.Double? {
    get
  }
  public var doubleValue: Swift.Double {
    get
  }
  public var array: [Any?]? {
    get
  }
  public var arrayValue: [Any?] {
    get
  }
  public var dictionary: [Swift.String : Any?]? {
    get
  }
  public var dictionaryValue: [Swift.String : Any?] {
    get
  }
  public var attachmentToken: DittoSwift.DittoAttachmentToken? {
    get
  }
}
@_hasMissingDesignatedInitializers public class DittoRemotePeerV2 {
  public var address: DittoSwift.DittoAddress {
    get
  }
  public var networkID: Swift.UInt32 {
    get
  }
  public var deviceName: Swift.String {
    get
  }
  public var os: Swift.String {
    get
  }
  @objc deinit
}
public enum DittoWriteStrategy {
  case merge
  case overwrite
  case insertIfAbsent
  case insertDefaultIfAbsent
  public static func == (a: DittoSwift.DittoWriteStrategy, b: DittoSwift.DittoWriteStrategy) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum DittoLiveQueryEvent {
  case initial
  case update(DittoSwift.DittoLiveQueryUpdate)
  public func hash(documents: [DittoSwift.DittoDocument]) -> Swift.UInt64
  public func hashMnemonic(documents: [DittoSwift.DittoDocument]) -> Swift.String
}
public struct DittoLiveQueryUpdate {
  public let oldDocuments: [DittoSwift.DittoDocument]
  public let insertions: [Swift.Int]
  public let deletions: [Swift.Int]
  public let updates: [Swift.Int]
  public let moves: [(from: Swift.Int, to: Swift.Int)]
}
extension DittoSwift.DittoLiveQueryEvent : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class Ditto {
  public var delegate: DittoSwift.DittoDelegate? {
    get
    set
  }
  public var deviceName: Swift.String {
    get
    set
  }
  public var siteID: Swift.UInt64 {
    get
  }
  public var activated: Swift.Bool {
    get
  }
  public var auth: DittoSwift.DittoAuthenticator? {
    get
  }
  public var store: DittoSwift.DittoStore {
    get
  }
  public var delegateEventQueue: Dispatch.DispatchQueue {
    get
    set
  }
  public func setTransportConfig(config: DittoSwift.DittoTransportConfig)
  public var isHistoryTrackingEnabled: Swift.Bool {
    get
    set
  }
  public init(identity: DittoSwift.DittoIdentity = .offlinePlayground(), persistenceDirectory directory: Foundation.URL? = nil)
  @available(*, deprecated, message: "use `setLicenseToken` instead")
  public func setAccessLicense(_ license: Swift.String)
  public func setLicenseToken(_ licenseToken: Swift.String) throws
  @available(*, deprecated, message: "use `tryStartSync` instead")
  public func startSync()
  public func tryStartSync() throws
  public func stopSync()
  public func transportDiagnostics() throws -> DittoSwift.DittoTransportDiagnostics
  public func observePeers(callback: @escaping (Swift.Array<DittoSwift.DittoRemotePeer>) -> ()) -> DittoSwift.DittoPeersObserver
  public func observePeersV2(callback: @escaping (Swift.String) -> ()) -> DittoSwift.DittoPeersObserver
  public var sdkVersion: Swift.String {
    get
  }
  public func runGarbageCollection()
  @objc deinit
}
public struct DittoDocumentID : Swift.Hashable {
  public init(value: Any?)
  public subscript(key: Swift.String) -> DittoSwift.DittoDocumentIDPath {
    get
  }
  public subscript(index: Swift.Int) -> DittoSwift.DittoDocumentIDPath {
    get
  }
  public var value: Any? {
    get
  }
  @available(*, deprecated, message: "use the `value` property instead")
  public func toNative() -> Any?
  public func toString() -> Swift.String
  public static func == (lhs: DittoSwift.DittoDocumentID, rhs: DittoSwift.DittoDocumentID) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension DittoSwift.DittoDocumentID : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension DittoSwift.DittoDocumentID : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.StringLiteralType)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.StringLiteralType
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = Swift.StringLiteralType
}
extension DittoSwift.DittoDocumentID : Swift.ExpressibleByBooleanLiteral {
  public init(booleanLiteral value: Swift.BooleanLiteralType)
  public typealias BooleanLiteralType = Swift.BooleanLiteralType
}
extension DittoSwift.DittoDocumentID : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.IntegerLiteralType)
  public typealias IntegerLiteralType = Swift.IntegerLiteralType
}
extension DittoSwift.DittoDocumentID : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any?
  public init(arrayLiteral elements: Any?...)
}
extension DittoSwift.DittoDocumentID : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.String
  public typealias Value = Any?
  public init(dictionaryLiteral elements: (DittoSwift.DittoDocumentID.Key, DittoSwift.DittoDocumentID.Value)...)
}
public struct DittoSingleDocumentLiveQueryEvent {
  public let isInitial: Swift.Bool
  public let oldDocument: DittoSwift.DittoDocument?
  public func hash(document: DittoSwift.DittoDocument?) -> Swift.UInt64
  public func hashMnemonic(document: DittoSwift.DittoDocument?) -> Swift.String
}
@_hasMissingDesignatedInitializers public class DittoExperimental {
  @objc deinit
}
public protocol DittoAuthenticationDelegate {
  func authenticationRequired(authenticator: DittoSwift.DittoAuthenticator)
  func authenticationExpiringSoon(authenticator: DittoSwift.DittoAuthenticator, secondsRemaining: Swift.Int64)
}
public struct DittoDocumentIDPath {
  public subscript(key: Swift.String) -> DittoSwift.DittoDocumentIDPath {
    get
  }
  public subscript(index: Swift.Int) -> DittoSwift.DittoDocumentIDPath {
    get
  }
  public var value: Any? {
    get
  }
  public var string: Swift.String? {
    get
  }
  public var stringValue: Swift.String {
    get
  }
  public var bool: Swift.Bool? {
    get
  }
  public var boolValue: Swift.Bool {
    get
  }
  public var int: Swift.Int? {
    get
  }
  public var intValue: Swift.Int {
    get
  }
  public var uint: Swift.UInt? {
    get
  }
  public var uintValue: Swift.UInt {
    get
  }
  public var array: [Any?]? {
    get
  }
  public var arrayValue: [Any?] {
    get
  }
  public var dictionary: [Swift.String : Any?]? {
    get
  }
  public var dictionaryValue: [Swift.String : Any?] {
    get
  }
}
public typealias DittoAuthenticationRequest = DittoObjC.DITAuthenticationRequest
public typealias DittoAuthenticationSuccess = DittoObjC.DITAuthenticationSuccess
public protocol DittoDelegate : AnyObject {
  func dittoTransportConditionDidChange(ditto: DittoSwift.Ditto, condition: DittoSwift.DittoTransportCondition, subsystem: DittoSwift.DittoConditionSource)
  func dittoIdentityProviderAuthenticationRequest(ditto: DittoSwift.Ditto, request: DittoSwift.DittoAuthenticationRequest)
}
extension DittoSwift.DittoDelegate {
  public func dittoTransportConditionDidChange(ditto: DittoSwift.Ditto, condition: DittoSwift.DittoTransportCondition, subsystem: DittoSwift.DittoConditionSource)
  public func dittoIdentityProviderAuthenticationRequest(ditto: DittoSwift.Ditto, request: DittoSwift.DittoAuthenticationRequest)
  public func dittoIdentityProviderRefreshRequest(ditto: DittoSwift.Ditto, request: Foundation.Data)
}
public struct DittoRemotePeer : Swift.Codable {
  public let networkId: Swift.String
  public let deviceName: Swift.String
  public let connections: [Swift.String]
  public let rssi: Swift.Float?
  public var approximateDistanceInMeters: Swift.Float?
  public init(networkId: Swift.String, deviceName: Swift.String, connections: [Swift.String], rssi: Swift.Float? = nil, approximateDistanceInMeters: Swift.Float? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension DittoSwift.DittoRemotePeer : Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  public typealias ID = Swift.String
}
@_hasMissingDesignatedInitializers public class DittoAttachment : Swift.Hashable {
  public var metadata: [Swift.String : Swift.String] {
    get
  }
  public static func == (lhs: DittoSwift.DittoAttachment, rhs: DittoSwift.DittoAttachment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func getData() throws -> Foundation.Data
  public func copy(toPath path: Swift.String) throws
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class DittoAttachmentToken : Swift.Equatable {
  public static func == (lhs: DittoSwift.DittoAttachmentToken, rhs: DittoSwift.DittoAttachmentToken) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DittoTransportDiagnostics {
  final public let transports: [DittoSwift.DittoTransportSnapshot]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DittoPendingIDSpecificOperation {
  public func subscribe() -> DittoSwift.DittoSubscription
  @discardableResult
  public func remove() -> Swift.Bool
  @discardableResult
  public func evict() -> Swift.Bool
  public func exec() -> DittoSwift.DittoDocument?
  public func observe(deliverOn queue: Dispatch.DispatchQueue = .main, eventHandler: @escaping (DittoSwift.DittoDocument?, DittoSwift.DittoSingleDocumentLiveQueryEvent) -> Swift.Void) -> DittoSwift.DittoLiveQuery
  public func observeWithNextSignal(deliverOn queue: Dispatch.DispatchQueue = .main, eventHandler: @escaping (DittoSwift.DittoDocument?, DittoSwift.DittoSingleDocumentLiveQueryEvent, @escaping DittoSwift.DittoSignalNext) -> Swift.Void) -> DittoSwift.DittoLiveQuery
  public func observeLocal(deliverOn queue: Dispatch.DispatchQueue = .main, eventHandler: @escaping (DittoSwift.DittoDocument?, DittoSwift.DittoSingleDocumentLiveQueryEvent) -> Swift.Void) -> DittoSwift.DittoLiveQuery
  public func observeLocalWithNextSignal(deliverOn queue: Dispatch.DispatchQueue = .main, eventHandler: @escaping (DittoSwift.DittoDocument?, DittoSwift.DittoSingleDocumentLiveQueryEvent, @escaping DittoSwift.DittoSignalNext) -> Swift.Void) -> DittoSwift.DittoLiveQuery
  @discardableResult
  public func update(_ closure: @escaping (DittoSwift.DittoMutableDocument?) -> Swift.Void) -> [DittoSwift.DittoUpdateResult]
  public func update<T>(using newValue: T) throws where T : Swift.Decodable, T : Swift.Encodable
  @objc deinit
}
public protocol DittoPeersObserver : AnyObject {
  func stop()
}
public enum DittoObjCInterop {
  public static func initDittoWith(ditDitto: DittoObjC.DITDitto) -> DittoSwift.Ditto
  public static func ditDittoFor(ditto: DittoSwift.Ditto) -> DittoObjC.DITDitto
}
@_hasMissingDesignatedInitializers public class DittoWriteTransactionPendingCursorOperation {
  public func limit(_ limit: Swift.Int32) -> Self
  public func sort(_ query: Swift.String, direction: DittoSwift.DittoSortDirection) -> Self
  public func offset(_ offset: Swift.UInt32) -> Self
  public func exec() -> [DittoSwift.DittoDocument]
  @discardableResult
  public func remove() -> [DittoSwift.DittoDocumentID]
  @discardableResult
  public func evict() -> [DittoSwift.DittoDocumentID]
  @discardableResult
  public func update(_ closure: @escaping ([DittoSwift.DittoMutableDocument]) -> Swift.Void) -> [DittoSwift.DittoDocumentID : [DittoSwift.DittoUpdateResult]]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DittoAuthenticator {
  public func loginWithToken(_ token: Swift.String, provider: Swift.String, completion: @escaping (DittoSwift.DittoSwiftError?) -> Swift.Void)
  public func loginWithCredentials(username: Swift.String, password: Swift.String, provider: Swift.String, completion: @escaping (DittoSwift.DittoSwiftError?) -> Swift.Void)
  public func isAuthenticated() -> Swift.Bool
  public var userID: Swift.String? {
    get
  }
  @objc deinit
}
public enum DittoSwiftError : Swift.Error {
  public enum ActivationErrorReason {
    case notActivatedError(message: Swift.String)
    case licenseTokenExpired(message: Swift.String)
    case licenseTokenVerificationFailed(message: Swift.String)
    case licenseTokenUnsupportedFutureVersion(message: Swift.String)
  }
  public enum AuthenticationErrorReason {
    case failedToAuthenticate
    public static func == (a: DittoSwift.DittoSwiftError.AuthenticationErrorReason, b: DittoSwift.DittoSwiftError.AuthenticationErrorReason) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum StoreErrorReason {
    case backendError(message: Swift.String)
    case documentContentEncodingFailed(error: Swift.Error?)
    case failedToDecodeDocumentID(error: Swift.Error)
    case nonStringKeyInDocument(key: DittoSwift.CBOR)
    case invalidDocumentStructure(cbor: DittoSwift.CBOR)
    case failedToDecodeDocumentData(error: Swift.Error?, data: [Swift.UInt8])
    case failedToGetDocumentData(path: Swift.String)
    case failedToDecodeDocument(error: Swift.Error)
    case documentNotFound
    case attachmentDataRetrievalError(error: Swift.Error)
    case attachmentFileCopyError(error: Swift.Error)
    case queryError(message: Swift.String)
    case queryArgumentsInvalid
  }
  public enum TransportErrorReason {
    case diagnosticsUnavailable
    case failedToDecodeTransportDiagnostics
    public static func == (a: DittoSwift.DittoSwiftError.TransportErrorReason, b: DittoSwift.DittoSwiftError.TransportErrorReason) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  case activationError(reason: DittoSwift.DittoSwiftError.ActivationErrorReason)
  case authenticationError(reason: DittoSwift.DittoSwiftError.AuthenticationErrorReason)
  case storeError(reason: DittoSwift.DittoSwiftError.StoreErrorReason)
  case transportError(reason: DittoSwift.DittoSwiftError.TransportErrorReason)
}
extension DittoSwift.DittoSwiftError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers public class DittoWriteTransaction {
  public func scoped(toCollectionNamed collectionName: DittoSwift.DittoCollectionName) -> DittoSwift.DittoScopedWriteTransaction
  public subscript(collectionName: DittoSwift.DittoCollectionName) -> DittoSwift.DittoScopedWriteTransaction {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DittoLogger {
  public static var enabled: Swift.Bool {
    get
    set
  }
  public static var minimumLogLevel: DittoSwift.DittoLogLevel {
    get
    set
  }
  public static var emojiLogLevelHeadingsEnabled: Swift.Bool {
    get
    set
  }
  public static func setLogFile(_ logFile: Swift.String?)
  public static func setLogFileURL(_ logFile: Foundation.URL?)
  public static func setCustomLogCallback(_ logCb: ((DittoSwift.DittoLogLevel, Swift.String) -> ())?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DittoSubscription {
  public var query: Swift.String {
    get
  }
  public var collectionName: DittoSwift.DittoCollectionName {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DittoScopedWriteTransaction {
  public var collectionName: DittoSwift.DittoCollectionName {
    get
  }
  @discardableResult
  public func insert(_ content: [Swift.String : Any?], withID id: DittoSwift.DittoDocumentID? = nil, isDefault: Swift.Bool = false) throws -> DittoSwift.DittoDocumentID
  @discardableResult
  public func insertWithStrategy(_ content: [Swift.String : Any?], id: DittoSwift.DittoDocumentID? = nil, writeStrategy: DittoSwift.DittoWriteStrategy = .overwrite) throws -> DittoSwift.DittoDocumentID
  @discardableResult
  public func insert<T>(_ content: T, withID id: DittoSwift.DittoDocumentID? = nil, isDefault: Swift.Bool = false) throws -> DittoSwift.DittoDocumentID where T : Swift.Decodable, T : Swift.Encodable
  @discardableResult
  public func insertWithStrategy<T>(_ content: T, id: DittoSwift.DittoDocumentID? = nil, writeStrategy: DittoSwift.DittoWriteStrategy = .overwrite) throws -> DittoSwift.DittoDocumentID where T : Swift.Decodable, T : Swift.Encodable
  public func findByID(_ id: DittoSwift.DittoDocumentID) -> DittoSwift.DittoWriteTransactionPendingIDSpecificOperation
  public func findByID(_ id: Any) -> DittoSwift.DittoWriteTransactionPendingIDSpecificOperation
  @available(*, deprecated, message: "use the version of `find` that doesn't require an argument label instead")
  public func find(query: Swift.String) -> DittoSwift.DittoWriteTransactionPendingCursorOperation
  public func find(_ query: Swift.String) -> DittoSwift.DittoWriteTransactionPendingCursorOperation
  public func find(_ query: Swift.String, args queryArgs: Swift.Dictionary<Swift.String, Any?>) -> DittoSwift.DittoWriteTransactionPendingCursorOperation
  public func findAll() -> DittoSwift.DittoWriteTransactionPendingCursorOperation
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DittoMutableDocumentPath : Swift.ExpressibleByStringLiteral, Swift.ExpressibleByIntegerLiteral, Swift.ExpressibleByBooleanLiteral, Swift.ExpressibleByFloatLiteral, Swift.ExpressibleByDictionaryLiteral, Swift.ExpressibleByArrayLiteral, Swift.ExpressibleByNilLiteral {
  public subscript(key: Swift.String) -> DittoSwift.DittoMutableDocumentPath {
    get
    set
  }
  public subscript(index: Swift.Int) -> DittoSwift.DittoMutableDocumentPath {
    get
    set
  }
  public func set(_ value: Any?, isDefault: Swift.Bool = false)
  public func remove()
  public func replaceWithCounter(isDefault: Swift.Bool = false)
  public func increment(amount: Swift.Double)
  public func push(_ value: Any?)
  @discardableResult
  public func pop() -> Any?
  public func insert(_ value: Any?)
  public var value: Any? {
    get
  }
  public var string: Swift.String? {
    get
  }
  public var stringValue: Swift.String {
    get
  }
  public var bool: Swift.Bool? {
    get
  }
  public var boolValue: Swift.Bool {
    get
  }
  public var int: Swift.Int? {
    get
  }
  public var intValue: Swift.Int {
    get
  }
  public var uint: Swift.UInt? {
    get
  }
  public var uintValue: Swift.UInt {
    get
  }
  public var float: Swift.Float? {
    get
  }
  public var floatValue: Swift.Float {
    get
  }
  public var double: Swift.Double? {
    get
  }
  public var doubleValue: Swift.Double {
    get
  }
  public var array: [Any?]? {
    get
  }
  public var arrayValue: [Any?] {
    get
  }
  public var dictionary: [Swift.String : Any?]? {
    get
  }
  public var dictionaryValue: [Swift.String : Any?] {
    get
  }
  public var attachmentToken: DittoSwift.DittoAttachmentToken? {
    get
  }
  required public init(stringLiteral value: Swift.StringLiteralType)
  required public init(extendedGraphemeClusterLiteral value: Swift.StringLiteralType)
  required public init(unicodeScalarLiteral value: Swift.StringLiteralType)
  required public init(integerLiteral value: Swift.IntegerLiteralType)
  required public init(booleanLiteral value: Swift.BooleanLiteralType)
  required public init(floatLiteral value: Swift.FloatLiteralType)
  required public init(dictionaryLiteral elements: (Swift.String, Any)...)
  required public init(arrayLiteral elements: Any...)
  required public init(nilLiteral: ())
  public typealias ArrayLiteralElement = Any
  public typealias BooleanLiteralType = Swift.BooleanLiteralType
  public typealias ExtendedGraphemeClusterLiteralType = Swift.StringLiteralType
  public typealias FloatLiteralType = Swift.FloatLiteralType
  public typealias IntegerLiteralType = Swift.IntegerLiteralType
  public typealias Key = Swift.String
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = Swift.StringLiteralType
  public typealias Value = Any
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DittoTypedDocument<T> where T : Swift.Decodable {
  final public let id: DittoSwift.DittoDocumentID
  final public let value: T
  @objc deinit
}
public enum DittoSortDirection {
  case ascending
  case descending
  public static func == (a: DittoSwift.DittoSortDirection, b: DittoSwift.DittoSortDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class DittoPendingCollectionsOperation {
  public func limit(_ limit: Swift.Int32) -> Self
  public func sort(_ query: Swift.String, direction: DittoSwift.DittoSortDirection) -> Self
  public func offset(_ offset: Swift.UInt32) -> Self
  public func subscribe() -> DittoSwift.DittoSubscription
  public func exec() -> [DittoSwift.DittoCollection]
  public func observe(deliverOn queue: Dispatch.DispatchQueue = .main, eventHandler: @escaping (DittoSwift.DittoCollectionsEvent) -> Swift.Void) -> DittoSwift.DittoLiveQuery
  public func observeWithNextSignal(deliverOn queue: Dispatch.DispatchQueue = .main, eventHandler: @escaping (DittoSwift.DittoCollectionsEvent, @escaping DittoSwift.DittoSignalNext) -> Swift.Void) -> DittoSwift.DittoLiveQuery
  public func observeLocal(deliverOn queue: Dispatch.DispatchQueue = .main, eventHandler: @escaping (DittoSwift.DittoCollectionsEvent) -> Swift.Void) -> DittoSwift.DittoLiveQuery
  public func observeLocalWithNextSignal(deliverOn queue: Dispatch.DispatchQueue = .main, eventHandler: @escaping (DittoSwift.DittoCollectionsEvent, @escaping DittoSwift.DittoSignalNext) -> Swift.Void) -> DittoSwift.DittoLiveQuery
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DittoAddress {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DittoPendingCursorOperation {
  public func limit(_ limit: Swift.Int32) -> Self
  public func sort(_ query: Swift.String, direction: DittoSwift.DittoSortDirection) -> Self
  public func offset(_ offset: Swift.UInt32) -> Self
  public func subscribe() -> DittoSwift.DittoSubscription
  @discardableResult
  public func remove() -> [DittoSwift.DittoDocumentID]
  @discardableResult
  public func evict() -> [DittoSwift.DittoDocumentID]
  public func exec() -> [DittoSwift.DittoDocument]
  public func observe(deliverOn queue: Dispatch.DispatchQueue = .main, eventHandler: @escaping ([DittoSwift.DittoDocument], DittoSwift.DittoLiveQueryEvent) -> Swift.Void) -> DittoSwift.DittoLiveQuery
  public func observeWithNextSignal(deliverOn queue: Dispatch.DispatchQueue = .main, eventHandler: @escaping ([DittoSwift.DittoDocument], DittoSwift.DittoLiveQueryEvent, @escaping DittoSwift.DittoSignalNext) -> Swift.Void) -> DittoSwift.DittoLiveQuery
  public func observeLocal(deliverOn queue: Dispatch.DispatchQueue = .main, eventHandler: @escaping ([DittoSwift.DittoDocument], DittoSwift.DittoLiveQueryEvent) -> Swift.Void) -> DittoSwift.DittoLiveQuery
  public func observeLocalWithNextSignal(deliverOn queue: Dispatch.DispatchQueue = .main, eventHandler: @escaping ([DittoSwift.DittoDocument], DittoSwift.DittoLiveQueryEvent, @escaping DittoSwift.DittoSignalNext) -> Swift.Void) -> DittoSwift.DittoLiveQuery
  @discardableResult
  public func update(_ closure: @escaping ([DittoSwift.DittoMutableDocument]) -> Swift.Void) -> [DittoSwift.DittoDocumentID : [DittoSwift.DittoUpdateResult]]
  @objc deinit
}
public protocol DittoBusDelegate {
  func dittoBus(_ bus: DittoSwift.DittoBus, didReceive message: DittoSwift.DittoBusMessage)
}
@_hasMissingDesignatedInitializers public class DittoBusMessage {
  public var sender: DittoSwift.DittoAddress {
    get
  }
  public var data: Foundation.Data {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DittoBus {
  public var delegate: DittoSwift.DittoBusDelegate? {
    get
    set
  }
  public var delegateEventQueue: Dispatch.DispatchQueue {
    get
    set
  }
  public func sendMessage(with data: Foundation.Data, to address: DittoSwift.DittoAddress)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DittoMutableDocument {
  public var id: DittoSwift.DittoDocumentID {
    get
  }
  public var value: [Swift.String : Any?] {
    get
  }
  public func typed<T>(_ type: T.Type) throws -> DittoSwift.DittoTypedDocument<T> where T : Swift.Decodable, T : Swift.Encodable
  public subscript(key: Swift.String) -> DittoSwift.DittoMutableDocumentPath {
    get
    set
  }
  @objc deinit
}
public enum DittoIdentity {
  @available(*, deprecated, message: "use `offlinePlayground` instead")
  case development(appID: Swift.String? = nil, siteID: Swift.UInt64? = nil, persistenceDirectory: Foundation.URL? = nil)
  case offlinePlayground(appID: Swift.String? = nil, siteID: Swift.UInt64? = nil, persistenceDirectory: Foundation.URL? = nil)
  @available(*, deprecated, message: "use `onlineWithAuthentication` instead")
  case online(appID: Swift.String, authenticationDelegate: DittoSwift.DittoAuthenticationDelegate, enableDittoCloudSync: Swift.Bool = true, customAuthURL: Foundation.URL? = nil, persistenceDirectory: Foundation.URL? = nil)
  case onlineWithAuthentication(appID: Swift.String, authenticationDelegate: DittoSwift.DittoAuthenticationDelegate, enableDittoCloudSync: Swift.Bool = true, customAuthURL: Foundation.URL? = nil, persistenceDirectory: Foundation.URL? = nil)
  case onlinePlayground(appID: Swift.String, enableDittoCloudSync: Swift.Bool = true, persistenceDirectory: Foundation.URL? = nil)
  case sharedKey(appID: Swift.String, sharedKey: Swift.String, siteID: Swift.UInt64? = nil, persistenceDirectory: Foundation.URL? = nil)
  case manual(certificateConfig: Swift.String)
}
@_hasMissingDesignatedInitializers public class DittoStore {
  public subscript(collectionName: DittoSwift.DittoCollectionName) -> DittoSwift.DittoCollection {
    get
  }
  public func collection(_ name: DittoSwift.DittoCollectionName) -> DittoSwift.DittoCollection
  public func collectionNames() -> [DittoSwift.DittoCollectionName]
  public func collections() -> DittoSwift.DittoPendingCollectionsOperation
  public func queriesHash(queries: [DittoSwift.DittoLiveQuery]) -> Swift.UInt
  public func queriesHashMnemonic(queries: [DittoSwift.DittoLiveQuery]) -> Swift.String
  @discardableResult
  public func write(_ block: @escaping (DittoSwift.DittoWriteTransaction) -> Swift.Void) -> [DittoSwift.DittoWriteTransactionResult]
  @objc deinit
}
extension DittoSwift.DittoLogLevel : Swift.Equatable {}
extension DittoSwift.DittoLogLevel : Swift.Hashable {}
extension DittoSwift.DittoLogLevel : Swift.RawRepresentable {}
extension DittoSwift.DittoTransportCondition : Swift.Equatable {}
extension DittoSwift.DittoTransportCondition : Swift.Hashable {}
extension DittoSwift.DittoTransportCondition : Swift.RawRepresentable {}
extension DittoSwift.DittoConditionSource : Swift.Equatable {}
extension DittoSwift.DittoConditionSource : Swift.Hashable {}
extension DittoSwift.DittoConditionSource : Swift.RawRepresentable {}
extension DittoSwift.DittoWriteStrategy : Swift.Equatable {}
extension DittoSwift.DittoWriteStrategy : Swift.Hashable {}
extension DittoSwift.DittoSwiftError.AuthenticationErrorReason : Swift.Equatable {}
extension DittoSwift.DittoSwiftError.AuthenticationErrorReason : Swift.Hashable {}
extension DittoSwift.DittoSwiftError.TransportErrorReason : Swift.Equatable {}
extension DittoSwift.DittoSwiftError.TransportErrorReason : Swift.Hashable {}
extension DittoSwift.DittoSortDirection : Swift.Equatable {}
extension DittoSwift.DittoSortDirection : Swift.Hashable {}
